const { Telegraf } = require('telegraf');
const mysql = require('mysql2');
const bcrypt = require('bcrypt');
require('dotenv').config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
pool.getConnection((err, connection) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    return;
  }
  console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î');
  connection.release();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function isAuthorized(ctx, next) {
  const chatId = ctx.chat.id;

  pool.query('SELECT * FROM users WHERE chat_id = ?', [chatId], (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err.message);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
      return;
    }

    if (results.length === 0) {
      ctx.reply('‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
      return;
    }

    next();
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.replyWithMarkdownV2(
    `üí° *–ü—Ä–∏–≤–µ—Ç, ${escapeMarkdownV2(ctx.from.first_name)}\\!*\n–Ø —Ç–≤–æ–π Telegram\\-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\\.\n\n` +
    `üåü –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/login <email> <password>\` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\\.`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–í–æ–π—Ç–∏", callback_data: "login" }],
          [{ text: "–ü–æ–º–æ—â—å", callback_data: "help" }],
        ],
      },
    }
  );
});


// –ö–æ–º–∞–Ω–¥–∞ /login
bot.command('login', (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length !== 2) {
    ctx.reply('üö® –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login <email> <password>');
    return;
  }

  const [email, password] = args.map(arg => arg.trim());  // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã


  pool.query(
    'SELECT * FROM users WHERE email = ?',
    [email],
    (err, results) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err.message);
        ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
        return;
      }

      if (results.length === 0) {
        ctx.reply('‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const user = results[0];

      const hashPass = /^\$2y\$/.test(user.password) ? '$2a$' + user.password.slice(4) : user.password;

      bcrypt.compare(password, hashPass, (compareErr, isMatch) => {
        if (compareErr) {
          console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:', compareErr.message);
          ctx.replyWithMarkdownV2(
            '‚ùå *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\\!*\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.'
          );
          
          return;
        }

        if (isMatch) {
          pool.query(
            'UPDATE users SET chat_id = ? WHERE id = ?',
            [ctx.from.id, user.id],
            (updateErr) => {
              if (updateErr) {
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_id:', updateErr.message);
                ctx.replyWithMarkdownV2(
                  `‚ùå *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_id*\n` +
                  `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\\.`
                );
                
                return;
              }

              ctx.replyWithMarkdownV2(
                `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${escapeMarkdownV2(user.name)}\\!*\n` +
                `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å\\.`
              );
              
            }
          );
        } else {
          ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
        }
      });
    }
  );
});


// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.command('stop', isAuthorized, (ctx) => {
  const chatId = ctx.from.id;

  pool.query('UPDATE users SET chat_id = 0 WHERE chat_id = ?', [chatId], (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err.message);
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ chat_id.');
      return;
    }

    if (results.affectedRows > 0) {
      ctx.replyWithMarkdownV2(
        `üîí *–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\\.*\n` +
        `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\\.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–í–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data: "login" }],
            ],
          },
        }
      );
      
    } else {
      ctx.reply('üö´ –í–∞—à chat_id —É–∂–µ –æ—á–∏—â–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  });
});

// –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /get_admin
bot.command('get_admin', isAuthorized, (ctx) => {
  pool.query('SELECT name FROM users WHERE adm = 1', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', err.message);
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
      return;
    }
    if (results.length > 0) {
      ctx.reply(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${results[0].name}`);
    } else {
      ctx.reply('‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  });
});


bot.action("login", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login <email> <password>");
});

bot.action("help", (ctx) => {
  ctx.replyWithMarkdownV2(
    `üí° *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n` +
    `\\- \`/login <email> <password>\` \‚Äî –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n` +
    `\\- \`/stop\` \‚Äî –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n` +
    `\\- \`/get_admin\` \‚Äî –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
  );ctx.update.message = {
    text: "/stop",
    from: ctx.from,
    chat: ctx.chat,
  };

  bot.handleUpdate(ctx.update);
});



function escapeMarkdownV2(text) {
  return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}




// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
(async () => {
  try {
    const botInfo = await bot.telegram.getMe();
    console.log(`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ò–º—è: ${botInfo.first_name}, Username: @${botInfo.username}`);

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.launch();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
  }
})();
